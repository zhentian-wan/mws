{"version":3,"sources":["main.js"],"names":["window","addEventListener","navigator","serviceWorker","register","console","log","registration","error","restaurants","neighborhoods","cuisines","map","observer","document","handleNeighborhoods","then","fetchNeighborhoods","fetchCuisines","IntersectionObserver","changes","_iteratorNormalCompletion","_didIteratorError","_iteratorError","undefined","_step","_iterator","Symbol","iterator","next","done","change","value","targets","target","childNodes","_iteratorNormalCompletion2","_didIteratorError2","_iteratorError2","_step2","_iterator2","setAttribute","getAttribute","tagName","err","return","isIntersecting","DBHelper","self","fillNeighborhoodsHTML","arguments","length","select","getElementById","forEach","neighborhood","option","createElement","innerHTML","unobserve","append","handleCuisines","fillCuisinesHTML","cuisine","lng","showMap","requestAnimationFrame","contianer","remove","add","addMarkersToMap","handlerCuisineAndNeighborhod","resetRestaurants","fillRestaurantsHTML","updateRestaurants","nSelect","cIndex","nIndex","fetchRestaurantByCuisineAndNeighborhood","lat","keyboardShortcuts","markers","classList","ul","createRestaurantHTML","restaurant","li","cSelect","getSourcesForRestaurant","el","selectedIndex","name","image","observe","info","className","id","address","more","detail","hidden","addListener","marker","href","url","push"],"mappings":"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","file":"main.js","sourcesContent":["(() => {\n  window.addEventListener('load', () => {\n    if ('serviceWorker' in navigator) {\n      // Register a service worker hosted at the root of the\n      // site using the default scope.\n      navigator.serviceWorker\n        .register('/sw.js')\n        .then(function(registration) {\n          console.log('Service worker registration succeeded', registration);\n        })\n        .catch(function(error) {\n          console.log('Service worker registration failed:', error);\n        });\n    } else {\n      console.log('Service workers are not supported.');\n    }\n  });\n})();\n\nlet restaurants, // eslint-disable-line no-unused-vars\n  neighborhoods, // eslint-disable-line no-unused-vars\n  cuisines, // eslint-disable-line no-unused-vars\n  observer; // eslint-disable-line no-unused-vars\nlet map; // eslint-disable-line no-unused-vars\nlet markers = []; // eslint-disable-line no-unused-vars\n/**\n * Fetch neighborhoods and cuisines as soon as the page is loaded.\n */\ndocument.addEventListener('DOMContentLoaded', () => {\n\n  DBHelper.fetchNeighborhoodsFromCache(handleNeighborhoods).then(() => {\n    fetchNeighborhoods();\n  });\n  DBHelper.fetchCuisinesFromCache(handleCuisines).then(() => {\n    fetchCuisines();\n  });\n  DBHelper.fetchRestaurantsFromCache(handlerCuisineAndNeighborhod);\n});\n\n/**\n * Will hot-load images as soon as the element is within the current viewport\n *\n */\nobserver = new IntersectionObserver(changes => {\n  for (const change of changes) {\n      if (!change.isIntersecting) return;\n      var targets = change.target.childNodes;\n      for (const target of targets) {\n          target.setAttribute('srcset', target.getAttribute('data-srcset'));\n          if (target.tagName === 'IMG') {\n              // src is not supported on SOURCE elements soon (deprecation warning)\n              target.setAttribute('src', target.getAttribute('data-src'));\n          }\n      }\n      observer.unobserve(change.target);\n  }\n});\n\n/**\n * Fetch all neighborhoods and set their HTML.\n */\nconst fetchNeighborhoods = () => {\n  DBHelper.fetchNeighborhoods(handleNeighborhoods);\n};\n\nconst handleNeighborhoods = (error, neighborhoods) => {\n  if (error) {\n    // Got an error\n    console.error(error);\n  } else {\n    self.neighborhoods = neighborhoods;\n    fillNeighborhoodsHTML(neighborhoods);\n  }\n};\n\n/**\n * Set neighborhoods HTML.\n */\nconst fillNeighborhoodsHTML = (neighborhoods = self.neighborhoods) => {\n  console.log('neighborhoods', neighborhoods);\n  const select = document.getElementById('neighborhoods-select');\n  neighborhoods.forEach(neighborhood => {\n    const option = document.createElement('option');\n    option.innerHTML = neighborhood;\n    option.value = neighborhood;\n    option.name = neighborhood;\n    select.append(option);\n  });\n};\n\n/**\n * Fetch all cuisines and set their HTML.\n */\nconst fetchCuisines = () => {\n  DBHelper.fetchCuisines(handleCuisines);\n};\n\nconst handleCuisines = (error, cuisines) => {\n  if (error) {\n    // Got an error!\n    console.error(error);\n  } else {\n    self.cuisines = cuisines;\n    fillCuisinesHTML();\n  }\n};\n\n/**\n * Set cuisines HTML.\n */\nconst fillCuisinesHTML = (cuisines = self.cuisines) => {\n  const select = document.getElementById('cuisines-select');\n\n  cuisines.forEach(cuisine => {\n    const option = document.createElement('option');\n    option.innerHTML = cuisine;\n    option.value = cuisine;\n    select.append(option);\n  });\n};\n\n/**\n * Initialize Google map, called from HTML.\n */\nwindow.initMap = () => {\n  let loc = {\n    lat: 40.722216,\n    lng: -73.987501\n  };\n  self.map = new google.maps.Map(document.getElementById('map'), {\n    zoom: 12,\n    center: loc,\n    scrollwheel: false,\n    keyboardShortcuts: false\n  });\n};\n\nwindow.showMap = () => {\n  requestAnimationFrame(() => {\n    const contianer = document.getElementById(\"map-container\");\n    contianer.classList.remove('hidden');\n    contianer.classList.add('active');\n    addMarkersToMap(restaurants);\n  });\n}\n\nconst handlerCuisineAndNeighborhod = (error, restaurants) => {\n  if (error) {\n    // Got an error!\n    console.error(error);\n  } else {\n    resetRestaurants(restaurants);\n    fillRestaurantsHTML();\n  }\n};\n\n/**\n * Update page and map for current restaurants.\n */\nconst updateRestaurants = () => {\n  const cSelect = document.getElementById('cuisines-select');\n  const nSelect = document.getElementById('neighborhoods-select');\n\n  const cIndex = cSelect.selectedIndex;\n  const nIndex = nSelect.selectedIndex;\n\n  const cuisine = cSelect[cIndex].value;\n  const neighborhood = nSelect[nIndex].value;\n\n    console.log(\"cuisine\", cuisine);\n    console.log(\"neighborhood\", neighborhood);\n\n  DBHelper.fetchRestaurantByCuisineAndNeighborhood(\n    cuisine,\n    neighborhood,\n    handlerCuisineAndNeighborhod\n  );\n};\n\n/**\n * Clear current restaurants, their HTML and remove their map markers.\n */\nconst resetRestaurants = restaurants => {\n  // Remove all restaurants\n  self.restaurants = [];\n  const ul = document.getElementById('restaurants-list');\n  ul.innerHTML = '';\n  // Remove all map markers\n  self.markers.forEach(m => m.setMap(null));\n  self.markers = [];\n  self.restaurants = restaurants;\n};\n\n/**\n * Create all restaurants HTML and add them to the webpage.\n */\nconst fillRestaurantsHTML = (restaurants = self.restaurants) => {\n  const ul = document.getElementById('restaurants-list');\n  restaurants.forEach(restaurant => {\n    ul.append(createRestaurantHTML(restaurant));\n  });\n};\n\n/**\n * Create restaurant HTML.\n */\nconst createRestaurantHTML = restaurant => {\n  const li = document.createElement('li');\n\n  const image = document.createElement('picture');\n\n  DBHelper.getSourcesForRestaurant(restaurant).map(el => {\n      el.setAttribute('alt', 'Picture of ' + restaurant.name + \" restaurant\");\n      image.append(el);\n  });\n  image.className = 'restaurant-img';\n  li.append(image);\n  observer.observe(image);\n\n  const info = document.createElement('div');\n  info.className = 'restaurant-info';\n\n  const name = document.createElement('h3');\n  name.innerHTML = restaurant.name;\n  name.id = `restaurant-item-${restaurant.id}`;\n  info.append(name);\n\n  const neighborhood = document.createElement('p');\n  neighborhood.innerHTML = restaurant.neighborhood;\n  info.append(neighborhood);\n\n  const address = document.createElement('p');\n  address.innerHTML = restaurant.address;\n  info.append(address);\n\n  const more = document.createElement('a');\n  more.innerHTML = 'View Details';\n  more.href = DBHelper.urlForRestaurant(restaurant);\n  more.setAttribute('aria-labelledby', `restaurant-detail-${restaurant.id}`);\n  info.append(more);\n\n  const detail = document.createElement('span');\n  detail.hidden = true;\n  detail.id = `restaurant-detail-${restaurant.id}`;\n  detail.innerHTML = `Restaurant name: ${restaurant.name}, address:${\n    restaurant.address\n  }, click the link to view detail`;\n\n  li.appendChild(detail);\n  li.append(info);\n\n  return li;\n};\n\n/**\n * Add markers for current restaurants to the map.\n */\nconst addMarkersToMap = (restaurants = self.restaurants) => {\n  restaurants.forEach(restaurant => {\n    // Add marker to the map\n    const marker = DBHelper.mapMarkerForRestaurant(restaurant, self.map);\n    google.maps.event.addListener(marker, 'click', () => {\n      window.location.href = marker.url;\n    });\n    self.markers.push(marker);\n  });\n};\n"]}