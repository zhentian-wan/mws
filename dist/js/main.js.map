{"version":3,"sources":["main.js"],"names":["window","addEventListener","navigator","serviceWorker","register","console","log","error","restaurants","neighborhoods","observer","cuisines","markers","document","DBHelper","fetchNeighborhoodsFromCache","handleNeighborhoods","then","fetchNeighborhoods","fetchCuisinesFromCache","handleCuisines","IntersectionObserver","changes","_iteratorNormalCompletion","_didIteratorError","_iteratorError","undefined","_step","_iterator","Symbol","iterator","next","done","change","value","isIntersecting","_iteratorNormalCompletion2","_didIteratorError2","_iteratorError2","_step2","_iterator2","targets","target","setAttribute","getAttribute","tagName","err","return","unobserve","self","fillNeighborhoodsHTML","arguments","length","select","getElementById","forEach","neighborhood","option","createElement","innerHTML","name","append","fetchCuisines","fillCuisinesHTML","cuisine","initMap","maps","Map","zoom","lat","lng","showMap","requestAnimationFrame","contianer","classList","remove","add","fillRestaurantsHTML","cSelect","selectedIndex","cIndex","nIndex","fetchRestaurantByCuisineAndNeighborhood","handlerCuisineAndNeighborhod","center","scrollwheel","keyboardShortcuts","m","setMap","ul","restaurant","createRestaurantHTML","li","image","getSourcesForRestaurant","map","el","updateRestaurants","className","nSelect","info","id","resetRestaurants","address","more","urlForRestaurant","detail","hidden","marker","mapMarkerForRestaurant","href","url","push"],"mappings":"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","file":"main.js","sourcesContent":["(() => {\n  window.addEventListener('load', () => {\n    if ('serviceWorker' in navigator) {\n      // Register a service worker hosted at the root of the\n      // site using the default scope.\n      navigator.serviceWorker\n        .register('/sw.js')\n        .catch(function(error) {\n          console.log('Service worker registration failed:', error);\n        });\n    }\n  });\n})();\n\nlet restaurants, // eslint-disable-line no-unused-vars\n  neighborhoods, // eslint-disable-line no-unused-vars\n  cuisines, // eslint-disable-line no-unused-vars\n  observer; // eslint-disable-line no-unused-vars\nlet map; // eslint-disable-line no-unused-vars\nlet markers = []; // eslint-disable-line no-unused-vars\n/**\n * Fetch neighborhoods and cuisines as soon as the page is loaded.\n */\ndocument.addEventListener('DOMContentLoaded', () => {\n\n  DBHelper.fetchNeighborhoodsFromCache(handleNeighborhoods).then(() => {\n    fetchNeighborhoods();\n  });\n  DBHelper.fetchCuisinesFromCache(handleCuisines).then(() => {\n    fetchCuisines();\n  });\n  DBHelper.fetchRestaurantsFromCache(handlerCuisineAndNeighborhod);\n});\n\n/**\n * Will hot-load images as soon as the element is within the current viewport\n *\n */\nobserver = new IntersectionObserver(changes => {\n  for (const change of changes) {\n      if (!change.isIntersecting) return;\n      var targets = change.target.childNodes;\n      for (const target of targets) {\n          target.setAttribute('srcset', target.getAttribute('data-srcset'));\n          if (target.tagName === 'IMG') {\n              // src is not supported on SOURCE elements soon (deprecation warning)\n              target.setAttribute('src', target.getAttribute('data-src'));\n          }\n      }\n      observer.unobserve(change.target);\n  }\n});\n\n/**\n * Fetch all neighborhoods and set their HTML.\n */\nconst fetchNeighborhoods = () => {\n  DBHelper.fetchNeighborhoods(handleNeighborhoods);\n};\n\nconst handleNeighborhoods = (error, neighborhoods) => {\n  if (error) {\n    // Got an error\n    console.error(error);\n  } else {\n    self.neighborhoods = neighborhoods;\n    fillNeighborhoodsHTML(neighborhoods);\n  }\n};\n\n/**\n * Set neighborhoods HTML.\n */\nconst fillNeighborhoodsHTML = (neighborhoods = self.neighborhoods) => {\n  const select = document.getElementById('neighborhoods-select');\n  neighborhoods.forEach(neighborhood => {\n    const option = document.createElement('option');\n    option.innerHTML = neighborhood;\n    option.value = neighborhood;\n    option.name = neighborhood;\n    select.append(option);\n  });\n};\n\n/**\n * Fetch all cuisines and set their HTML.\n */\nconst fetchCuisines = () => {\n  DBHelper.fetchCuisines(handleCuisines);\n};\n\nconst handleCuisines = (error, cuisines) => {\n  if (error) {\n    // Got an error!\n    console.error(error);\n  } else {\n    self.cuisines = cuisines;\n    fillCuisinesHTML();\n  }\n};\n\n/**\n * Set cuisines HTML.\n */\nconst fillCuisinesHTML = (cuisines = self.cuisines) => {\n  const select = document.getElementById('cuisines-select');\n\n  cuisines.forEach(cuisine => {\n    const option = document.createElement('option');\n    option.innerHTML = cuisine;\n    option.value = cuisine;\n    select.append(option);\n  });\n};\n\n/**\n * Initialize Google map, called from HTML.\n */\nwindow.initMap = () => {\n  let loc = {\n    lat: 40.722216,\n    lng: -73.987501\n  };\n  self.map = new google.maps.Map(document.getElementById('map'), {\n    zoom: 12,\n    center: loc,\n    scrollwheel: false,\n    keyboardShortcuts: false\n  });\n};\n\nwindow.showMap = () => {\n  requestAnimationFrame(() => {\n    const contianer = document.getElementById(\"map-container\");\n    contianer.classList.remove('hidden');\n    contianer.classList.add('active');\n    addMarkersToMap(restaurants);\n  });\n}\n\nconst handlerCuisineAndNeighborhod = (error, restaurants) => {\n  if (error) {\n    // Got an error!\n    console.error(error);\n  } else {\n    resetRestaurants(restaurants);\n    fillRestaurantsHTML();\n  }\n};\n\n/**\n * Update page and map for current restaurants.\n */\nconst updateRestaurants = () => {\n  const cSelect = document.getElementById('cuisines-select');\n  const nSelect = document.getElementById('neighborhoods-select');\n\n  const cIndex = cSelect.selectedIndex;\n  const nIndex = nSelect.selectedIndex;\n\n  const cuisine = cSelect[cIndex].value;\n  const neighborhood = nSelect[nIndex].value;\n\n  DBHelper.fetchRestaurantByCuisineAndNeighborhood(\n    cuisine,\n    neighborhood,\n    handlerCuisineAndNeighborhod\n  );\n};\n\n/**\n * Clear current restaurants, their HTML and remove their map markers.\n */\nconst resetRestaurants = restaurants => {\n  // Remove all restaurants\n  self.restaurants = [];\n  const ul = document.getElementById('restaurants-list');\n  ul.innerHTML = '';\n  // Remove all map markers\n  self.markers.forEach(m => m.setMap(null));\n  self.markers = [];\n  self.restaurants = restaurants;\n};\n\n/**\n * Create all restaurants HTML and add them to the webpage.\n */\nconst fillRestaurantsHTML = (restaurants = self.restaurants) => {\n  const ul = document.getElementById('restaurants-list');\n  restaurants.forEach(restaurant => {\n    ul.append(createRestaurantHTML(restaurant));\n  });\n};\n\n/**\n * Create restaurant HTML.\n */\nconst createRestaurantHTML = restaurant => {\n  const li = document.createElement('li');\n\n  const image = document.createElement('picture');\n\n  DBHelper.getSourcesForRestaurant(restaurant).map(el => {\n      el.setAttribute('alt', 'Picture of ' + restaurant.name + \" restaurant\");\n      image.append(el);\n  });\n  image.className = 'restaurant-img';\n  li.append(image);\n  observer.observe(image);\n\n  const info = document.createElement('div');\n  info.className = 'restaurant-info';\n\n  const name = document.createElement('h3');\n  name.innerHTML = restaurant.name;\n  name.id = `restaurant-item-${restaurant.id}`;\n  info.append(name);\n\n  const neighborhood = document.createElement('p');\n  neighborhood.innerHTML = restaurant.neighborhood;\n  info.append(neighborhood);\n\n  const address = document.createElement('p');\n  address.innerHTML = restaurant.address;\n  info.append(address);\n\n  const more = document.createElement('a');\n  more.innerHTML = 'View Details';\n  more.href = DBHelper.urlForRestaurant(restaurant);\n  more.setAttribute('aria-labelledby', `restaurant-detail-${restaurant.id}`);\n  info.append(more);\n\n  const detail = document.createElement('span');\n  detail.hidden = true;\n  detail.id = `restaurant-detail-${restaurant.id}`;\n  detail.innerHTML = `Restaurant name: ${restaurant.name}, address:${\n    restaurant.address\n  }, click the link to view detail`;\n\n  li.appendChild(detail);\n  li.append(info);\n\n  return li;\n};\n\n/**\n * Add markers for current restaurants to the map.\n */\nconst addMarkersToMap = (restaurants = self.restaurants) => {\n  restaurants.forEach(restaurant => {\n    // Add marker to the map\n    const marker = DBHelper.mapMarkerForRestaurant(restaurant, self.map);\n    google.maps.event.addListener(marker, 'click', () => {\n      window.location.href = marker.url;\n    });\n    self.markers.push(marker);\n  });\n};\n"]}