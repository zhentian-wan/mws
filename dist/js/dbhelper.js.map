{"version":3,"sources":["dbhelper.js"],"names":["DBPromise","db","r","Object","assign","photograph","id","formatRestaurantsData","restaurants","map","formatSingleRestaurantData","dbPromise","idb","open","oldVersion","createObjectStore","put","keyPath","transaction","objectStore","createIndex","then","tx","peopleStore","name","age","favoriteAnimal","complete","index","getAll","cursor","animalIndex","advance","logPerson","continue","keyvalStore","openIDB","DBHelper","_classCallCheck","this","neighborhoods","cuisines","callback","_this","details","length","data","catch","err","_this2","resneighborhoodstaurants","store","_this3","fetch","DATABASE_URL","res","json","forEach","d","setLocalData","error","_this4","get","Number","console","log","_this5","restaurant","_defineProperty","cuisine","fetchRestaurants","results","filter","cuisine_type","neighborhood","i","uniqueNeighborhoods","v","indexOf","uniqueCuisines","_restaurant$photograp","split","_restaurant$photograp2","_slicedToArray","ext","google","position","latlng","title","url","urlForRestaurant","animation","maps","Animation","DROP","_restaurant$photograp3","_restaurant$photograp4","filename","jpeg","setAttribute","imageUrlForRestaurant","webp","document","createElement","fallback"],"mappings":"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","file":"dbhelper.js","sourcesContent":["let DBPromise;\n\n(() => {\n  const dbPromise = idb.open('restuarant_app_db', 4, function(db) {\n    switch (db.oldVersion) {\n      case 0: {\n        const keyvalStore = db.createObjectStore('keyval');\n        keyvalStore.put('value is value', 'key');\n      }\n\n      // name is the primary key\n      case 1: {\n        // eslint-disable-line\n        db.createObjectStore('people', { keyPath: 'name' });\n      }\n\n      // create index 'favoriteAnimal'\n      case 2: {\n        // eslint-disable-line\n        const peopleStore = db.transaction.objectStore('people');\n        peopleStore.createIndex('animal', 'favoriteAnimal'); // named index as 'animal'\n      }\n\n      case 3: {\n        // eslint-disable-line\n        const peopleStore = db.transaction.objectStore('people');\n        peopleStore.createIndex('age', 'age');\n      }\n    }\n  });\n\n  dbPromise.then(db => {\n    const tx = db.transaction('people', 'readwrite');\n    const peopleStore = tx.objectStore('people');\n    peopleStore.put({\n      name: 'Sam Munoz',\n      age: 25,\n      favoriteAnimal: 'dog'\n    });\n\n    peopleStore.put({\n      name: 'Wam ok',\n      age: 34,\n      favoriteAnimal: 'cat'\n    });\n\n    peopleStore.put({\n      name: 'Kim Bad',\n      age: 35,\n      favoriteAnimal: 'dog'\n    });\n\n    peopleStore.put({\n      name: 'Jam Good',\n      age: 21,\n      favoriteAnimal: 'dog'\n    });\n\n    return tx.complete;\n  });\n\n  dbPromise.then(db => {\n    const tx = db.transaction('people');\n    const peopleStore = tx.objectStore('people');\n    const animalIndex = peopleStore.index('animal');\n\n    return animalIndex.getAll('dog');\n    // return animalIndex.getAll();\n    // return peopleStore.getAll();\n  });\n\n  dbPromise\n    .then(db => {\n      const tx = db.transaction('people');\n      const peopleStore = tx.objectStore('people');\n      const ageIndex = peopleStore.index('age');\n\n      return ageIndex.openCursor();\n    })\n    .then(cursor => {\n      if (!cursor) return;\n      // Skip first two\n      return cursor.advance(2);\n    })\n    .then(function logPerson(cursor) {\n      if (!cursor) return;\n      // loop each one get value out ot it\n      // console.log(\"Cursor at: \", cursor.value.name);\n      // continue looping\n      return cursor.continue().then(logPerson);\n    });\n\n  dbPromise.then(db => {\n    const tx = db.transaction('keyval');\n    const keyvalStore = tx.objectStore('keyval');\n    return keyvalStore.get('key');\n  });\n\n  dbPromise.then(db => {\n    const tx = db.transaction('keyval', 'readwrite');\n    const keyvalStore = tx.objectStore('keyval');\n    keyvalStore.put('barValue', 'fooKey');\n    return tx.complete;\n  });\n\n  DBPromise = openIDB();\n\n  function openIDB() {\n    return idb.open('restaurant-app', 3, db => {\n      switch (db.oldVersion) {\n        case 0: {\n          // Create table 'restaurants', primary key is id\n          const store = db.createObjectStore('restaurants', {\n            keyPath: 'id'\n          });\n          // if index is needed, put down below\n          store.createIndex('by-name', 'name');\n        }\n\n        case 1: {\n          // eslint-disable-line\n          db.createObjectStore('cuisines');\n          db.createObjectStore('neighborhoods');\n        }\n\n        case 2: {\n          // eslint-disable-line\n          db.createObjectStore('detail', { keyPath: 'id' });\n        }\n      }\n    });\n  }\n})();\n\n/**\n * photograph no longer return 1.jpg\n in api returns 1, so format data here\n also the last one doesn't have, using id to replace\n * @param r\n * @returns {{} & any & {photograph: string}}\n */\nfunction formatSingleRestaurantData(r) {\n  return Object.assign({}, r, {\n    photograph: r.photograph ? `${r.photograph}.jpg` : `${r.id}.jpg`\n  });\n}\n\n/**\n * Format restaurants array data\n * @param restaurants\n */\nfunction formatRestaurantsData(restaurants) {\n  return restaurants.map(formatSingleRestaurantData);\n}\n\n/**\n * Common database helper functions.\n */\nclass DBHelper {\n  // eslint-disable-line no-unused-vars\n\n  constructor() {\n    this.restaurants = [];\n    this.neighborhoods = [];\n    this.cuisines = [];\n    this.details = {};\n  }\n\n  /**\n   * Database URL.\n   * Change this to restaurants.json file location on your server.\n   */\n  static get DATABASE_URL() {\n    const port = 1337; // Change this to your server port\n    return `http://localhost:${port}/restaurants`;\n  }\n\n  static setLocalData(restaurants) {\n    this.restaurants = restaurants;\n  }\n\n  static fetchRestaurantsFromCache(callback) {\n    return DBPromise.then(db => {\n      // only fetch from db once\n      if (!db || (this.restaurants && this.restaurants.length)) {\n        return;\n      }\n\n      const tx = db.transaction('restaurants');\n      const store = tx.objectStore('restaurants').index('by-name');\n      return store\n        .getAll()\n        .then(data => callback(null, data))\n        .catch(err => callback(err, null));\n    });\n  }\n\n  static fetchNeighborhoodsFromCache(callback) {\n    return DBPromise.then(db => {\n      // only fetch from db once\n      if (!db || (this.resneighborhoodstaurants && this.neighborhoods.length)) {\n        return;\n      }\n\n      const tx = db.transaction('neighborhoods');\n      const store = tx.objectStore('neighborhoods');\n      return store\n        .getAll()\n        .then(data => callback(null, data))\n        .catch(err => callback(err, null));\n    });\n  }\n\n  static fetchCuisinesFromCache(callback) {\n    return DBPromise.then(db => {\n      // only fetch from db once\n      if (!db || (this.cuisines && this.cuisines.length)) {\n        return;\n      }\n\n      const tx = db.transaction('cuisines');\n      const store = tx.objectStore('cuisines');\n      return store\n        .getAll()\n        .then(data => callback(null, data))\n        .catch(err => callback(err, null));\n    });\n  }\n\n  /**\n   * Fetch all restaurants.\n   */\n  static fetchRestaurants(callback) {\n    if (this.restaurants && this.restaurants.length) {\n      return this.restaurants;\n    }\n\n    fetch(DBHelper.DATABASE_URL)\n      .then(res => res.json())\n      .then(formatRestaurantsData)\n      .then(data => {\n        DBPromise.then(db => {\n          const tx = db.transaction('restaurants', 'readwrite');\n          const store = tx.objectStore('restaurants');\n          data && data.forEach(d => store.put(d));\n          return tx.complete;\n        });\n        return data;\n      })\n      .then(restaurants => callback(null, restaurants))\n      .then(restaurants => DBHelper.setLocalData(restaurants))\n      .catch(error => callback(error, null));\n  }\n\n  static fetchRestaurantByIdFromCache(id, callback) {\n    return DBPromise.then(db => {\n      // only fetch from db once\n      if (!db || (this.details && this.details[id])) {\n        return;\n      }\n\n      const tx = db.transaction('detail');\n      const store = tx.objectStore('detail');\n      return store\n        .get(Number(id))\n        .then(data => {\n          console.log('data', data);\n          callback(null, data);\n        })\n        .catch(err => callback(err, null));\n    });\n  }\n\n  /**\n   * Fetch a restaurant by its ID.\n   */\n  static fetchRestaurantById(id, callback) {\n    fetch(`${DBHelper.DATABASE_URL}/${id}`)\n      .then(res => res.json())\n      .then(formatSingleRestaurantData)\n      .then(restaurant => {\n        DBPromise.then(db => {\n          const tx = db.transaction('detail', 'readwrite');\n          const store = tx.objectStore('detail');\n          store.put(restaurant);\n          return tx.complete;\n        });\n        this.details = Object.assign({}, this.details, { [id]: restaurant });\n        return restaurant;\n      })\n      .then(restaurant => {\n        if (restaurant) {\n          // Got the restaurant\n          callback(null, restaurant);\n        } else {\n          // Restaurant does not exist in the database\n          callback('Restaurant does not exist', null);\n        }\n      })\n      .catch(error => callback(error, null));\n  }\n\n  /**\n   * Fetch restaurants by a cuisine type with proper error handling.\n   */\n  static fetchRestaurantByCuisine(cuisine, callback) {\n    // Fetch all restaurants  with proper error handling\n    DBHelper.fetchRestaurants((error, restaurants) => {\n      if (error) {\n        callback(error, null);\n      } else {\n        // Filter restaurants to have only given cuisine type\n        const results = restaurants.filter(r => r.cuisine_type == cuisine);\n        callback(null, results);\n      }\n    });\n  }\n\n  /**\n   * Fetch restaurants by a neighborhood with proper error handling.\n   */\n  static fetchRestaurantByNeighborhood(neighborhood, callback) {\n    // Fetch all restaurants\n    DBHelper.fetchRestaurants((error, restaurants) => {\n      if (error) {\n        callback(error, null);\n      } else {\n        // Filter restaurants to have only given neighborhood\n        const results = restaurants.filter(r => r.neighborhood == neighborhood);\n        callback(null, results);\n      }\n    });\n  }\n\n  /**\n   * Fetch restaurants by a cuisine and a neighborhood with proper error handling.\n   */\n  static fetchRestaurantByCuisineAndNeighborhood(\n    cuisine,\n    neighborhood,\n    callback\n  ) {\n    // Fetch all restaurants\n    DBHelper.fetchRestaurants((error, restaurants) => {\n      if (error) {\n        callback(error, null);\n      } else {\n        let results = restaurants;\n        if (cuisine != 'all') {\n          // filter by cuisine\n          results = results.filter(r => r.cuisine_type == cuisine);\n        }\n        if (neighborhood != 'all') {\n          // filter by neighborhood\n          results = results.filter(r => r.neighborhood == neighborhood);\n        }\n        callback(null, results);\n      }\n    });\n  }\n\n  /**\n   * Fetch all neighborhoods with proper error handling.\n   */\n  static fetchNeighborhoods(callback) {\n    // Fetch all restaurants\n    DBHelper.fetchRestaurants((error, restaurants) => {\n      if (error) {\n        callback(error, null);\n      } else {\n        // Get all neighborhoods from all restaurants\n        const neighborhoods = restaurants.map(\n          (v, i) => restaurants[i].neighborhood\n        );\n        // Remove duplicates from neighborhoods\n        const uniqueNeighborhoods = neighborhoods.filter(\n          (v, i) => neighborhoods.indexOf(v) == i\n        );\n\n        DBPromise.then(db => {\n          const tx = db.transaction('neighborhoods', 'readwrite');\n          const store = tx.objectStore('neighborhoods');\n\n          uniqueNeighborhoods &&\n            uniqueNeighborhoods.forEach((d, i) => store.put(d, i));\n        });\n        callback(null, uniqueNeighborhoods);\n      }\n    });\n  }\n\n  /**\n   * Fetch all cuisines with proper error handling.\n   */\n  static fetchCuisines(callback) {\n    // Fetch all restaurants\n    DBHelper.fetchRestaurants((error, restaurants) => {\n      if (error) {\n        callback(error, null);\n      } else {\n        // Get all cuisines from all restaurants\n        const cuisines = restaurants.map((v, i) => restaurants[i].cuisine_type);\n        // Remove duplicates from cuisines\n        const uniqueCuisines = cuisines.filter(\n          (v, i) => cuisines.indexOf(v) == i\n        );\n\n        DBPromise.then(db => {\n          const tx = db.transaction('cuisines', 'readwrite');\n          const store = tx.objectStore('cuisines');\n\n          uniqueCuisines && uniqueCuisines.forEach((d, i) => store.put(d, i));\n        });\n        callback(null, uniqueCuisines);\n      }\n    });\n  }\n\n  /**\n   * Restaurant page URL.\n   */\n  static urlForRestaurant(restaurant) {\n    return `./restaurant.html?id=${restaurant.id}`;\n  }\n\n  /**\n   * Restaurant image URL.\n   */\n  static imageUrlForRestaurant(name, ext) {\n    return `/img/${name}-320_small.${ext}`;\n  }\n\n  /**\n   * Generate name of different size of images\n   */\n  static imageSrcset(restaurant) {\n    const [name, ext] = restaurant.photograph.split('.');\n    return `/img/${name}-320_small.${ext} 400w, /img/${name}-640_medium.${ext} 640w, /img/${name}-800_large.${ext} 800w `;\n  }\n\n  /**\n   * Map marker for a restaurant.\n   */\n  static mapMarkerForRestaurant(restaurant, map) {\n    const marker = new google.maps.Marker({\n      position: restaurant.latlng,\n      title: restaurant.name,\n      url: DBHelper.urlForRestaurant(restaurant),\n      map: map,\n      animation: google.maps.Animation.DROP\n    });\n    return marker;\n  }\n\n  static getSourcesForRestaurant(restaurant) {\n    const [filename, ext] = restaurant.photograph.split('.');\n\n    let jpeg = document.createElement('SOURCE');\n    jpeg.setAttribute(\n      'data-srcset',\n      DBHelper.imageUrlForRestaurant(filename, ext)\n    );\n\n    let webp = document.createElement('SOURCE');\n    webp.setAttribute(\n      'data-srcset',\n      DBHelper.imageUrlForRestaurant(filename, 'webp')\n    );\n    webp.setAttribute('type', 'image/webp');\n\n    let fallback = document.createElement('img');\n    fallback.setAttribute(\n      'data-srcset',\n      DBHelper.imageUrlForRestaurant(filename, ext)\n    );\n\n    return [webp, jpeg, fallback];\n  }\n}\n"]}