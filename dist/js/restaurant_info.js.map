{"version":3,"sources":["restaurant_info.js"],"names":["window","addEventListener","navigator","serviceWorker","register","then","registration","console","log","error","restaurant","map","initMap","fetchRestaurantFromURL","handleFetchRestaurantFromURL","handleFecthRestaurant","callback","google","maps","Map","document","getElementById","zoom","latlng","scrollwheel","center","self","id","getParameterByName","DBHelper","fetchRestaurantById","fillRestaurantHTML","arguments","length","undefined","name","innerHTML","setAttribute","image","src","imageUrlForRestaurant","address","sizes","operating_hours","fillRestaurantHoursHTML","fillReviewsHTML","hours","key","operatingHours","row","createElement","day","time","reviews","appendChild","title","container","noReviews","review","ul","createReviewHTML","forEach","wrapper","className","li","rating","append","date","comments","fillBreadcrumb","link","href","urlForRestaurant","breadcrumb","exec","url","decodeURIComponent","results","replace"],"mappings":"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","file":"restaurant_info.js","sourcesContent":["(() => {\n    window.addEventListener('load', () => {\n        if ('serviceWorker' in navigator) {\n            // Register a service worker hosted at the root of the\n            // site using the default scope.\n            navigator.serviceWorker.register('/sw.js').then(function (registration) {\n                console.log('Service worker registration succeeded:', registration);\n            }).catch(function (error) {\n                console.log('Service worker registration failed:', error);\n            });\n        } else {\n            console.log('Service workers are not supported.');\n        }\n    });\n})();\n\nlet restaurant; // eslint-disable-line no-unused-vars\nlet map; // eslint-disable-line no-unused-vars\n\n/**\n * Initialize Google map, called from HTML.\n */\nwindow.initMap = () => {\n    fetchRestaurantFromURL(handleFetchRestaurantFromURL);\n};\n\nconst handleFecthRestaurant = (callback) => (error, restaurant) => {\n    console.log(\"handleFecthRestaurant\", restaurant)\n    self.restaurant = restaurant;\n    if (!restaurant) {\n        console.error(error);\n        return;\n    }\n    fillRestaurantHTML();\n    callback(null, restaurant);\n};\n\nfunction handleFetchRestaurantFromURL(error, restaurant) {\n    if (error) {\n        // Got an error!\n        console.error(error);\n    } else {\n        self.map = new google.maps.Map(document.getElementById(\"map\"), {\n            zoom: 16,\n            center: restaurant.latlng,\n            scrollwheel: false\n        });\n        fillBreadcrumb(restaurant);\n        DBHelper.mapMarkerForRestaurant(restaurant, self.map);\n    }\n}\n\n/**\n * Get current restaurant from page URL.\n */\nconst fetchRestaurantFromURL = callback => {\n    if (self.restaurant) {\n        // restaurant already fetched!\n        callback(null, self.restaurant);\n        return;\n    }\n    const id = getParameterByName(\"id\");\n    if (!id) {\n        // no id found in URL\n        const error = \"No restaurant id in URL\";\n        callback(error, null);\n    } else {\n        DBHelper.fetchRestaurantById(id, handleFecthRestaurant(callback));\n    }\n};\n\n/**\n * Create restaurant HTML and add it to the webpage\n */\nconst fillRestaurantHTML = (restaurant = self.restaurant) => {\n    const name = document.getElementById(\"restaurant-name\");\n    name.innerHTML = restaurant.name;\n    name.setAttribute('tabindex', '0');\n    name.setAttribute('aria-label', `restaurant ${restaurant.name}`);\n\n    const address = document.getElementById(\"restaurant-address\");\n    address.innerHTML = restaurant.address;\n\n    const image = document.getElementById(\"restaurant-img\");\n    image.className = \"restaurant-img\";\n    image.src = DBHelper.imageUrlForRestaurant(restaurant);\n    image.alt = `Restaurant ${restaurant.name}`;\n    image.srcset = DBHelper.imageSrcset(restaurant);\n    image.sizes = \"(max-width: 640px) 100vw, 50vw\";\n\n    const cuisine = document.getElementById(\"restaurant-cuisine\");\n    cuisine.innerHTML = restaurant.cuisine_type;\n\n    // fill operating hours\n    if (restaurant.operating_hours) {\n        fillRestaurantHoursHTML();\n    }\n    // fill reviews\n    fillReviewsHTML();\n};\n\n/**\n * Create restaurant operating hours HTML table and add it to the webpage.\n */\nconst fillRestaurantHoursHTML = (operatingHours = self.restaurant.operating_hours) => {\n    const hours = document.getElementById(\"restaurant-hours\");\n    for (let key in operatingHours) {\n        const row = document.createElement(\"tr\");\n\n        const day = document.createElement(\"td\");\n        day.innerHTML = key;\n        row.appendChild(day);\n\n        const time = document.createElement(\"td\");\n        time.innerHTML = operatingHours[key];\n        row.appendChild(time);\n\n        hours.appendChild(row);\n    }\n};\n\n/**\n * Create all reviews HTML and add them to the webpage.\n */\nconst fillReviewsHTML = (reviews = self.restaurant.reviews) => {\n    const container = document.getElementById(\"reviews-container\");\n    const title = document.createElement(\"h3\");\n    title.innerHTML = \"Reviews\";\n    container.appendChild(title);\n\n    if (!reviews) {\n        const noReviews = document.createElement(\"p\");\n        noReviews.innerHTML = \"No reviews yet!\";\n        container.appendChild(noReviews);\n        return;\n    }\n    const ul = document.getElementById(\"reviews-list\");\n    reviews.forEach(review => {\n        ul.appendChild(createReviewHTML(review));\n    });\n    container.appendChild(ul);\n};\n\n/**\n * Create review HTML and add it to the webpage.\n */\nconst createReviewHTML = review => {\n    const li = document.createElement(\"li\");\n\n    const wrapper = document.createElement(\"article\");\n    wrapper.className = \"review-wrapper\";\n\n    const name = document.createElement(\"h4\");\n    name.className = \"review-name\";\n    name.innerHTML = review.name;\n    wrapper.appendChild(name);\n\n    const rating = document.createElement(\"p\");\n    rating.innerHTML = `${review.rating}`;\n    rating.className = \"review-rating\";\n    wrapper.appendChild(rating);\n\n    li.append(wrapper);\n\n    const date = document.createElement(\"p\");\n    date.innerHTML = review.date;\n    date.className = \"review-date\";\n    li.appendChild(date);\n\n    const comments = document.createElement(\"p\");\n    comments.innerHTML = review.comments;\n    li.appendChild(comments);\n\n    return li;\n};\n\n/**\n * Add restaurant name to the breadcrumb navigation menu\n */\nconst fillBreadcrumb = (restaurant = self.restaurant) => {\n    const breadcrumb = document.querySelector(\"#breadcrumb\");\n    const li = document.createElement(\"li\");\n    const link = document.createElement('a');\n    link.href = DBHelper.urlForRestaurant(restaurant);\n    link.innerHTML = restaurant.name;\n    link.setAttribute('aria-current', 'page');\n    li.append(link);\n    breadcrumb.appendChild(li);\n};\n\n/**\n * Get a parameter by name from page URL.\n */\nconst getParameterByName = (name, url) => {\n    if (!url) url = window.location.href;\n    name = name.replace(/[\\[\\]]/g, \"\\\\$&\");\n    const regex = new RegExp(`[?&]${name}(=([^&#]*)|&|#|$)`),\n        results = regex.exec(url);\n    if (!results) return null;\n    if (!results[2]) return \"\";\n    return decodeURIComponent(results[2].replace(/\\+/g, \" \"));\n};\n"]}